from buildbot.plugins import buildslave, changes, schedulers, status, util
from buildbot.schedulers.forcesched import BuildslaveChoiceParameter
from buildbot.status import html, status_push, web, words

import environments as envs
import factories
from passwords import HTTP_USERNAME, HTTP_PASSWORD
from passwords import SLAVE_PASSWORD, CHANGE_PASSWORD
from passwords import HOMU_BUILDBOT_SECRET, GITHUB_STATUS_TOKEN


LINUX_WORKERS = ["servo-linux{}".format(i) for i in range(1, 7)]
MAC_WORKERS = ["servo-mac{}".format(i) for i in range(1, 10)]
CROSS_WORKERS = ["servo-linux-cross{}".format(i) for i in range(1, 4)]
WINDOWS_WORKERS = ["servo-windows{}".format(i) for i in range(1, 3)]


c = BuildmasterConfig = {}
c['protocols'] = {'pb': {'port': 9001}}
c['caches'] = {
    'Changes': 1000,
    'Builds': 100,
    'chdicts': 1000,
}


##################
# BUILDSLAVES
##################


c['slaves'] = [
    buildslave.BuildSlave(s, SLAVE_PASSWORD, max_builds=1)
    for s in MAC_WORKERS + CROSS_WORKERS + LINUX_WORKERS + WINDOWS_WORKERS
]


##################
# CHANGESOURCES
##################


c['change_source'] = [changes.PBChangeSource(passwd=CHANGE_PASSWORD)]


##################
# SCHEDULERS
##################


def servo_auto_try_filter(c):
    return (c.project == 'servo/servo' and
            c.who.startswith('bors-servo') and
            c.branch in ["auto", "try"])


def servo_master_filter(c):
    return (c.project == 'servo/servo' and
            c.who.startswith('bors-servo') and
            c.branch == "master")


c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="servo-auto",
    treeStableTimer=None,
    builderNames=[
        "android",
        "arm32",
        "arm64",
        "linux-dev",
        "linux-rel-css",
        "linux-rel-nogate",
        "linux-rel-wpt",
        "mac-dev-unit",
        "mac-rel-css1",
        "mac-rel-css2",
        "mac-rel-wpt1",
        "mac-rel-wpt2",
        "mac-rel-wpt3",
        "mac-rel-wpt4",
        "windows-msvc-dev",
    ],
    change_filter=util.ChangeFilter(filter_fn=servo_auto_try_filter),
))
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="doc-push",
    treeStableTimer=None,
    builderNames=["doc"],
    change_filter=util.ChangeFilter(filter_fn=servo_master_filter),
))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=[
        "android",
        "android-nightly",
        "arm32",
        "arm64",
        "linux-dev",
        "linux-nightly",
        "linux-rel-css",
        "linux-rel-intermittent",
        "linux-rel-nogate",
        "linux-rel-wpt",
        "mac-dev-unit",
        "mac-nightly",
        "mac-rel-css1",
        "mac-rel-css2",
        "mac-rel-intermittent",
        "mac-rel-wpt1",
        "mac-rel-wpt2",
        "mac-rel-wpt3",
        "mac-rel-wpt4",
        "windows-msvc-dev",
        "windows-msvc-nightly",
    ],
    properties=[
        BuildslaveChoiceParameter(),
    ]
))
c['schedulers'].append(schedulers.Nightly(
    name="Nightly",
    branch="master",
    builderNames=[
        "android-nightly",
        "linux-nightly",
        "linux-rel-intermittent",
        "mac-nightly",
        "mac-rel-intermittent",
        "windows-msvc-nightly",
    ],
    hour=1,
    minute=0,
))


##################
# BUILDERS
##################


def branch_priority(builder, requests):
    for r in requests:
        if r.source.branch != "try":
            return r
    return requests[0]


def workers_for_env(env):
    return {
        envs.build_android: CROSS_WORKERS,
        envs.build_arm32: CROSS_WORKERS,
        envs.build_arm64: CROSS_WORKERS,
        envs.build_linux: LINUX_WORKERS,
        envs.build_mac: MAC_WORKERS,
        envs.build_windows_msvc: WINDOWS_WORKERS,
    }[env]


class DynamicServoBuilder(util.BuilderConfig):
    """\
    Builder which uses DynamicServoFactory to run steps
    from a YAML file in the main servo repo.
    """
    def __init__(self, name, environment):
        # util.BuilderConfig is an old-style class so we cannot use super()
        # but must hardcode the superclass here
        util.BuilderConfig.__init__(
            self,
            name=name,
            slavenames=workers_for_env(environment),
            factory=factories.DynamicServoFactory(name, environment),
            nextBuild=branch_priority,
            canStartBuild=util.enforceChosenSlave,
        )


c['builders'] = [
    DynamicServoBuilder("android", envs.build_android),
    DynamicServoBuilder("android-nightly", envs.build_android),
    DynamicServoBuilder("arm32", envs.build_arm32),
    DynamicServoBuilder("arm64", envs.build_arm64),
    DynamicServoBuilder("linux-dev", envs.build_linux),
    DynamicServoBuilder("linux-nightly", envs.build_linux),
    DynamicServoBuilder("linux-rel-css", envs.build_linux),
    DynamicServoBuilder("linux-rel-intermittent", envs.build_linux),
    DynamicServoBuilder("linux-rel-nogate", envs.build_linux),
    DynamicServoBuilder("linux-rel-wpt", envs.build_linux),
    DynamicServoBuilder("mac-dev-unit", envs.build_mac),
    DynamicServoBuilder("mac-nightly", envs.build_mac),
    DynamicServoBuilder("mac-rel-css1", envs.build_mac),
    DynamicServoBuilder("mac-rel-css2", envs.build_mac),
    DynamicServoBuilder("mac-rel-intermittent", envs.build_mac),
    DynamicServoBuilder("mac-rel-wpt1", envs.build_mac),
    DynamicServoBuilder("mac-rel-wpt2", envs.build_mac),
    DynamicServoBuilder("mac-rel-wpt3", envs.build_mac),
    DynamicServoBuilder("mac-rel-wpt4", envs.build_mac),
    DynamicServoBuilder("windows-msvc-dev", envs.build_windows_msvc),
    DynamicServoBuilder("windows-msvc-nightly", envs.build_windows_msvc),
    # The below builders are not dynamic but rather have hard-coded factories
    util.BuilderConfig(
        name="doc",
        slavenames=LINUX_WORKERS,
        factory=factories.doc,
        canStartBuild=util.enforceChosenSlave,
    ),
]


##################
# STATUS TARGETS
##################


c['status'] = [
    status_push.HttpStatusPush(
        serverUrl='http://build.servo.org:54856/buildbot',
        extra_post_params={'secret': HOMU_BUILDBOT_SECRET},
    ),
    html.WebStatus(
        http_port=8010,
        authz=web.authz.Authz(
            auth=web.auth.BasicAuth([(HTTP_USERNAME, HTTP_PASSWORD)]),
            gracefulShutdown='auth',
            forceBuild='auth',
            forceAllBuilds='auth',
            pingBuilder='auth',
            stopBuild='auth',
            stopAllBuilds='auth',
            cancelPendingBuild='auth',
        ),
    ),
    status.GitHubStatus(
        token=GITHUB_STATUS_TOKEN,
        repoOwner='servo',
        repoName='servo',
        startDescription="Build started.",
        endDescription="Build done.",
    ),
    words.IRC(
        host="irc.mozilla.org",
        port=6697,
        useSSL=True,
        nick="servo_buildbot",
        channels=["#servo-bots"],
        notify_events={
            'exception': 1,
            'finished': 1,
            'success': 1,
            'failure': 1,
        },
    ),
]


##################
# PROJECT IDENTITY
##################


c['title'] = "Servo"
c['titleURL'] = "http://github.com/servo/servo"
c['buildbotURL'] = "http://build.servo.org/"


##################
# DATABASE URL
##################


c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
